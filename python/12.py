# Highly divisible triangular number
# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
#   1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#    1: 1
#    3: 1,3
#    6: 1,2,3,6
#   10: 1,2,5,10
#   15: 1,3,5,15
#   21: 1,3,7,21
#   28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# Answer: 76576500

from time import clock

def f(N):
  B = [True for i in range(N)]
  L = [1 for i in range(N)]

  i = 4
  while i < N:
    B[i] = False
    j = i/2
    c = 1
    while j&1 == 0:
      c += 1
      j /= 2
    L[i] = c
    i += 2

  i = 3
  while i < N:
    if B[i]:
      L[i] = 2
      j = i*2
      while j < N:
        B[j] = False
        k = j
        c = 1
        while k % i == 0:
          c += 1
          k /= i
        L[j] *= c
        j += i
    i += 2

  i = 3
  while i < N:
    if L[i-1]*L[i]>500:
      return i*(i-1)/2
    i += 1
  return -1
  
s = clock()
k = 10000
while True:
  c = f(k)
  if c != -1:
    print c
    break
  k *= 2

print clock()-s
